@model EyeBoard.Areas.Admin.Models.UserViewModel

@{
    ViewBag.Title = Resources.UserNew;
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}



<h2>@Resources.Users</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <h4>@Resources.UserNew</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <label for="UserName">@Resources.UserName</label>
        @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.UserName } })
        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="DisplayName">@Resources.DisplayName</label>
        @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.DisplayName } })
        @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="Password">@Resources.Password</label>
        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.Password } })
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="ConfirmPassword">@Resources.ConfirmPassword</label>
        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.ConfirmPassword } })
        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
    </div>


    <table id="roleTable" class="table table-bordered table-sm">
        <thead>
            <tr>
                <th>@Resources.Role</th>
                <th><a href="#" class="addRoleButton btn btn-info btn-small" role="button"><i class="fa fa-plus"></i></a></th>
            </tr>
        </thead>
        <tbody>
            <tr class="roleRow prototype d-none">
                <td><input type="text" class="form-control rolepicker" /></td>
                <td><a href="#" class="removeRoleButton btn btn-secondary btn-small" role="button"><i class="fa fa-minus"></i></a></td>
            </tr>
            <tr class="roleRow">
                <td><input type="text" class="form-control rolepicker" name="Roles[]" /></td>
                <td><a href="#" class="removeRoleButton btn btn-secondary btn-small" role="button"><i class="fa fa-minus"></i></a></td>
            </tr>
        </tbody>
    </table>


    <div class="form-group">
        
        <input type="submit" value="@Resources.CreateNew" class="btn btn-primary" />
        @Html.ActionLink("Terug", "Index", null, new { @class = "btn btn-link" })
        
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

            $(function () {

                $('[data-toggle="tooltip"]').tooltip();

                $('.addRoleButton').click(function (e) {
                    var newRow = $('.roleRow.prototype').clone().removeClass('prototype d-none');
                    newRow.find('.removeRoleButton').click(function (e) {
                        $(this).parent().parent().remove();
                    });
                    newRow.find('.rolepicker').attr('name', 'Roles[]').autocomplete({
                        source: function (request, response) {
                            $.getJSON("/api/role/" + request.term, function (data) {
                                response($.map(data, function (item) {
                                    return item.Name;
                                }));
                            });
                        },
                        minLength: 2
                    });
                    $('#roleTable tbody').append(newRow);
                });

                $('.removeRoleButton').click(function (e) {
                    $(this).parent().parent().remove();
                });

                $(".rolepicker").autocomplete({
                    source: function (request, response) {
                        $.getJSON("/api/role/" + request.term, function (data) {
                            response($.map(data, function (item) {
                                return item.Name;
                            }));
                        });
                    },
                    minLength: 2
                });
            });

    </script>
}

